<?php

/**
 * This file is part of phplrt package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Phplrt\SourceMap\Tests;

use Phplrt\SourceMap\Generator\Version3\Base64VlqCodec;
use Phplrt\SourceMap\Generator\Version3\CodecInterface;
use Phplrt\SourceMap\Generator\Version3\Mapping;

class MappingTestCase extends TestCase
{
    /**
     * @var array<string, array<int>>
     */
    private const BASE64VLQ_DATA_PROVIDER = [
        'AAAA'    => [0, 0, 0, 0],
        'AAgBC'   => [0, 0, 16, 1],
        'B'       => [-2147483648],
        '+/////D' => [2147483647],
        'EAEEA'   => [2, 0, 2, 2, 0],
        'OAAQ'    => [7, 0, 0, 8],
        'EACP'    => [2, 0, 1, -7],
        'KAAK'    => [5, 0, 0, 5],
        'EAAE'    => [2, 0, 0, 2],

        // int8 interval
        '/P'      => [-255],
        '9P'      => [-254],
        '7P'      => [-253],
        '5P'      => [-252],
        '3P'      => [-251],
        '1P'      => [-250],
        'zP'      => [-249],
        'xP'      => [-248],
        'vP'      => [-247],
        'tP'      => [-246],
        'rP'      => [-245],
        'pP'      => [-244],
        'nP'      => [-243],
        'lP'      => [-242],
        'jP'      => [-241],
        'hP'      => [-240],
        '/O'      => [-239],
        '9O'      => [-238],
        '7O'      => [-237],
        '5O'      => [-236],
        '3O'      => [-235],
        '1O'      => [-234],
        'zO'      => [-233],
        'xO'      => [-232],
        'vO'      => [-231],
        'tO'      => [-230],
        'rO'      => [-229],
        'pO'      => [-228],
        'nO'      => [-227],
        'lO'      => [-226],
        'jO'      => [-225],
        'hO'      => [-224],
        '/N'      => [-223],
        '9N'      => [-222],
        '7N'      => [-221],
        '5N'      => [-220],
        '3N'      => [-219],
        '1N'      => [-218],
        'zN'      => [-217],
        'xN'      => [-216],
        'vN'      => [-215],
        'tN'      => [-214],
        'rN'      => [-213],
        'pN'      => [-212],
        'nN'      => [-211],
        'lN'      => [-210],
        'jN'      => [-209],
        'hN'      => [-208],
        '/M'      => [-207],
        '9M'      => [-206],
        '7M'      => [-205],
        '5M'      => [-204],
        '3M'      => [-203],
        '1M'      => [-202],
        'zM'      => [-201],
        'xM'      => [-200],
        'vM'      => [-199],
        'tM'      => [-198],
        'rM'      => [-197],
        'pM'      => [-196],
        'nM'      => [-195],
        'lM'      => [-194],
        'jM'      => [-193],
        'hM'      => [-192],
        '/L'      => [-191],
        '9L'      => [-190],
        '7L'      => [-189],
        '5L'      => [-188],
        '3L'      => [-187],
        '1L'      => [-186],
        'zL'      => [-185],
        'xL'      => [-184],
        'vL'      => [-183],
        'tL'      => [-182],
        'rL'      => [-181],
        'pL'      => [-180],
        'nL'      => [-179],
        'lL'      => [-178],
        'jL'      => [-177],
        'hL'      => [-176],
        '/K'      => [-175],
        '9K'      => [-174],
        '7K'      => [-173],
        '5K'      => [-172],
        '3K'      => [-171],
        '1K'      => [-170],
        'zK'      => [-169],
        'xK'      => [-168],
        'vK'      => [-167],
        'tK'      => [-166],
        'rK'      => [-165],
        'pK'      => [-164],
        'nK'      => [-163],
        'lK'      => [-162],
        'jK'      => [-161],
        'hK'      => [-160],
        '/J'      => [-159],
        '9J'      => [-158],
        '7J'      => [-157],
        '5J'      => [-156],
        '3J'      => [-155],
        '1J'      => [-154],
        'zJ'      => [-153],
        'xJ'      => [-152],
        'vJ'      => [-151],
        'tJ'      => [-150],
        'rJ'      => [-149],
        'pJ'      => [-148],
        'nJ'      => [-147],
        'lJ'      => [-146],
        'jJ'      => [-145],
        'hJ'      => [-144],
        '/I'      => [-143],
        '9I'      => [-142],
        '7I'      => [-141],
        '5I'      => [-140],
        '3I'      => [-139],
        '1I'      => [-138],
        'zI'      => [-137],
        'xI'      => [-136],
        'vI'      => [-135],
        'tI'      => [-134],
        'rI'      => [-133],
        'pI'      => [-132],
        'nI'      => [-131],
        'lI'      => [-130],
        'jI'      => [-129],
        'hI'      => [-128],
        '/H'      => [-127],
        '9H'      => [-126],
        '7H'      => [-125],
        '5H'      => [-124],
        '3H'      => [-123],
        '1H'      => [-122],
        'zH'      => [-121],
        'xH'      => [-120],
        'vH'      => [-119],
        'tH'      => [-118],
        'rH'      => [-117],
        'pH'      => [-116],
        'nH'      => [-115],
        'lH'      => [-114],
        'jH'      => [-113],
        'hH'      => [-112],
        '/G'      => [-111],
        '9G'      => [-110],
        '7G'      => [-109],
        '5G'      => [-108],
        '3G'      => [-107],
        '1G'      => [-106],
        'zG'      => [-105],
        'xG'      => [-104],
        'vG'      => [-103],
        'tG'      => [-102],
        'rG'      => [-101],
        'pG'      => [-100],
        'nG'      => [-99],
        'lG'      => [-98],
        'jG'      => [-97],
        'hG'      => [-96],
        '/F'      => [-95],
        '9F'      => [-94],
        '7F'      => [-93],
        '5F'      => [-92],
        '3F'      => [-91],
        '1F'      => [-90],
        'zF'      => [-89],
        'xF'      => [-88],
        'vF'      => [-87],
        'tF'      => [-86],
        'rF'      => [-85],
        'pF'      => [-84],
        'nF'      => [-83],
        'lF'      => [-82],
        'jF'      => [-81],
        'hF'      => [-80],
        '/E'      => [-79],
        '9E'      => [-78],
        '7E'      => [-77],
        '5E'      => [-76],
        '3E'      => [-75],
        '1E'      => [-74],
        'zE'      => [-73],
        'xE'      => [-72],
        'vE'      => [-71],
        'tE'      => [-70],
        'rE'      => [-69],
        'pE'      => [-68],
        'nE'      => [-67],
        'lE'      => [-66],
        'jE'      => [-65],
        'hE'      => [-64],
        '/D'      => [-63],
        '9D'      => [-62],
        '7D'      => [-61],
        '5D'      => [-60],
        '3D'      => [-59],
        '1D'      => [-58],
        'zD'      => [-57],
        'xD'      => [-56],
        'vD'      => [-55],
        'tD'      => [-54],
        'rD'      => [-53],
        'pD'      => [-52],
        'nD'      => [-51],
        'lD'      => [-50],
        'jD'      => [-49],
        'hD'      => [-48],
        '/C'      => [-47],
        '9C'      => [-46],
        '7C'      => [-45],
        '5C'      => [-44],
        '3C'      => [-43],
        '1C'      => [-42],
        'zC'      => [-41],
        'xC'      => [-40],
        'vC'      => [-39],
        'tC'      => [-38],
        'rC'      => [-37],
        'pC'      => [-36],
        'nC'      => [-35],
        'lC'      => [-34],
        'jC'      => [-33],
        'hC'      => [-32],
        '/B'      => [-31],
        '9B'      => [-30],
        '7B'      => [-29],
        '5B'      => [-28],
        '3B'      => [-27],
        '1B'      => [-26],
        'zB'      => [-25],
        'xB'      => [-24],
        'vB'      => [-23],
        'tB'      => [-22],
        'rB'      => [-21],
        'pB'      => [-20],
        'nB'      => [-19],
        'lB'      => [-18],
        'jB'      => [-17],
        'hB'      => [-16],
        'f'       => [-15],
        'd'       => [-14],
        'b'       => [-13],
        'Z'       => [-12],
        'X'       => [-11],
        'V'       => [-10],
        'T'       => [-9],
        'R'       => [-8],
        'P'       => [-7],
        'N'       => [-6],
        'L'       => [-5],
        'J'       => [-4],
        'H'       => [-3],
        'F'       => [-2],
        'D'       => [-1],
        'A'       => [0],
        'C'       => [1],
        'E'       => [2],
        'G'       => [3],
        'I'       => [4],
        'K'       => [5],
        'M'       => [6],
        'O'       => [7],
        'Q'       => [8],
        'S'       => [9],
        'U'       => [10],
        'W'       => [11],
        'Y'       => [12],
        'a'       => [13],
        'c'       => [14],
        'e'       => [15],
        'gB'      => [16],
        'iB'      => [17],
        'kB'      => [18],
        'mB'      => [19],
        'oB'      => [20],
        'qB'      => [21],
        'sB'      => [22],
        'uB'      => [23],
        'wB'      => [24],
        'yB'      => [25],
        '0B'      => [26],
        '2B'      => [27],
        '4B'      => [28],
        '6B'      => [29],
        '8B'      => [30],
        '+B'      => [31],
        'gC'      => [32],
        'iC'      => [33],
        'kC'      => [34],
        'mC'      => [35],
        'oC'      => [36],
        'qC'      => [37],
        'sC'      => [38],
        'uC'      => [39],
        'wC'      => [40],
        'yC'      => [41],
        '0C'      => [42],
        '2C'      => [43],
        '4C'      => [44],
        '6C'      => [45],
        '8C'      => [46],
        '+C'      => [47],
        'gD'      => [48],
        'iD'      => [49],
        'kD'      => [50],
        'mD'      => [51],
        'oD'      => [52],
        'qD'      => [53],
        'sD'      => [54],
        'uD'      => [55],
        'wD'      => [56],
        'yD'      => [57],
        '0D'      => [58],
        '2D'      => [59],
        '4D'      => [60],
        '6D'      => [61],
        '8D'      => [62],
        '+D'      => [63],
        'gE'      => [64],
        'iE'      => [65],
        'kE'      => [66],
        'mE'      => [67],
        'oE'      => [68],
        'qE'      => [69],
        'sE'      => [70],
        'uE'      => [71],
        'wE'      => [72],
        'yE'      => [73],
        '0E'      => [74],
        '2E'      => [75],
        '4E'      => [76],
        '6E'      => [77],
        '8E'      => [78],
        '+E'      => [79],
        'gF'      => [80],
        'iF'      => [81],
        'kF'      => [82],
        'mF'      => [83],
        'oF'      => [84],
        'qF'      => [85],
        'sF'      => [86],
        'uF'      => [87],
        'wF'      => [88],
        'yF'      => [89],
        '0F'      => [90],
        '2F'      => [91],
        '4F'      => [92],
        '6F'      => [93],
        '8F'      => [94],
        '+F'      => [95],
        'gG'      => [96],
        'iG'      => [97],
        'kG'      => [98],
        'mG'      => [99],
        'oG'      => [100],
        'qG'      => [101],
        'sG'      => [102],
        'uG'      => [103],
        'wG'      => [104],
        'yG'      => [105],
        '0G'      => [106],
        '2G'      => [107],
        '4G'      => [108],
        '6G'      => [109],
        '8G'      => [110],
        '+G'      => [111],
        'gH'      => [112],
        'iH'      => [113],
        'kH'      => [114],
        'mH'      => [115],
        'oH'      => [116],
        'qH'      => [117],
        'sH'      => [118],
        'uH'      => [119],
        'wH'      => [120],
        'yH'      => [121],
        '0H'      => [122],
        '2H'      => [123],
        '4H'      => [124],
        '6H'      => [125],
        '8H'      => [126],
        '+H'      => [127],
        'gI'      => [128],
        'iI'      => [129],
        'kI'      => [130],
        'mI'      => [131],
        'oI'      => [132],
        'qI'      => [133],
        'sI'      => [134],
        'uI'      => [135],
        'wI'      => [136],
        'yI'      => [137],
        '0I'      => [138],
        '2I'      => [139],
        '4I'      => [140],
        '6I'      => [141],
        '8I'      => [142],
        '+I'      => [143],
        'gJ'      => [144],
        'iJ'      => [145],
        'kJ'      => [146],
        'mJ'      => [147],
        'oJ'      => [148],
        'qJ'      => [149],
        'sJ'      => [150],
        'uJ'      => [151],
        'wJ'      => [152],
        '6J'      => [157],
        '8J'      => [158],
        '+J'      => [159],
        'gK'      => [160],
        'iK'      => [161],
        'kK'      => [162],
        'mK'      => [163],
        'oK'      => [164],
        'qK'      => [165],
        'sK'      => [166],
        'uK'      => [167],
        'wK'      => [168],
        'yK'      => [169],
        '0K'      => [170],
        '2K'      => [171],
        '4K'      => [172],
        '6K'      => [173],
        '8K'      => [174],
        '+K'      => [175],
        'gL'      => [176],
        'iL'      => [177],
        'kL'      => [178],
        'mL'      => [179],
        'oL'      => [180],
        'qL'      => [181],
        'sL'      => [182],
        'uL'      => [183],
        'wL'      => [184],
        'yL'      => [185],
        '0L'      => [186],
        '2L'      => [187],
        '4L'      => [188],
        '6L'      => [189],
        '8L'      => [190],
        '+L'      => [191],
        'gM'      => [192],
        'iM'      => [193],
        'kM'      => [194],
        'mM'      => [195],
        'oM'      => [196],
        'qM'      => [197],
        'sM'      => [198],
        'uM'      => [199],
        'wM'      => [200],
        'yM'      => [201],
        '0M'      => [202],
        '2M'      => [203],
        '4M'      => [204],
        '6M'      => [205],
        '8M'      => [206],
        '+M'      => [207],
        'gN'      => [208],
        'iN'      => [209],
        'kN'      => [210],
        'mN'      => [211],
        'oN'      => [212],
        'qN'      => [213],
        'sN'      => [214],
        'uN'      => [215],
        'wN'      => [216],
        'yN'      => [217],
        '0N'      => [218],
        '2N'      => [219],
        '4N'      => [220],
        '6N'      => [221],
        '8N'      => [222],
        '+N'      => [223],
        'gO'      => [224],
        'iO'      => [225],
        'kO'      => [226],
        'mO'      => [227],
        'oO'      => [228],
        'qO'      => [229],
        'sO'      => [230],
        'uO'      => [231],
        'wO'      => [232],
        'yO'      => [233],
        '0O'      => [234],
        '2O'      => [235],
        '4O'      => [236],
        '6O'      => [237],
        '8O'      => [238],
        '+O'      => [239],
        'gP'      => [240],
        'iP'      => [241],
        'kP'      => [242],
        'mP'      => [243],
        'oP'      => [244],
        'qP'      => [245],
        'sP'      => [246],
        'uP'      => [247],
        'wP'      => [248],
        'yP'      => [249],
        '0P'      => [250],
        '2P'      => [251],
        '4P'      => [252],
        '6P'      => [253],
        '8P'      => [254],
        '+P'      => [255],
    ];

    /**
     * @var Mapping
     * @psalm-suppress PropertyNotSetInConstructor
     */
    protected Mapping $map;

    /**
     * @var CodecInterface
     * @psalm-suppress PropertyNotSetInConstructor
     */
    protected CodecInterface $codec;

    /**
     * @return void
     * @psalm-suppress all
     */
    public function setUp(): void
    {
        parent::setUp();

        $this->codec = new Base64VlqCodec();
        $this->map = new Mapping($this->codec);
    }

    /**
     * @return array<array{array<int>, string}>
     */
    public function codecDataProvider(): array
    {
        $result = [];

        foreach (self::BASE64VLQ_DATA_PROVIDER as $bas64vlq => $data) {
            $result[$bas64vlq] = [$data, $bas64vlq];
        }

        return $result;
    }

    /**
     * @dataProvider codecDataProvider
     */
    public function testCodecEncoding(array $from, string $expected): void
    {
        $this->assertSame($expected, $this->codec->encode($from));
    }

    /**
     * @dataProvider codecDataProvider
     */
    public function testCodecDecoding(array $expected, string $from): void
    {
        $this->assertSame($expected, $this->codec->decode($from));
    }

    /**
     * @return array<array{string, array<array<array<int>>>}>
     */
    public function mappingDataProvider(): array
    {
        $name = $value = [];
        foreach (self::BASE64VLQ_DATA_PROVIDER as $vlq64 => $seq) {
            $name[] = $vlq64;
            $value[] = $seq;
        }

        return [
            \implode(',', $name) => [\implode(',', $name), [$value]],
            \implode(';', $name) => [\implode(';', $name), \array_map(fn($i) => [$i], $value)],
        ];
    }

    /**
     * @dataProvider mappingDataProvider
     */
    public function testMappingEncoding(string $expected, array $from): void
    {
        $this->assertSame($expected, $this->map->encode($from));
    }

    /**
     * @dataProvider mappingDataProvider
     */
    public function testMappingDecoding(string $from, array $expected): void
    {
        $this->assertSame($expected, $this->map->decode($from));
    }
}
